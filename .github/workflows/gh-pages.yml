name: github pages

# mainブランチにプッシュしたときjobsに記述した操作を行う
on:
  push:
    branches:
    - main

jobs:
  build-deploy:
    # ubuntu OS を仮想マシン上に用意する
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v2

    # Node.js環境のセットアップを行う
    - name: setup node
      uses: actions/setup-node@v2
      with:
        node-version: '16.x'

    # キャッシュを使用
    - name: cache-node-module
      uses: actions/cache@v3
      id: node_modules_cache_id
      env: 
        cache-name: cache-node-module
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

    # package.jsonに基づき依存パッケージをインストールする
    - name: install npm packages
      if: ${{ steps.node_modules_cache_id.outputs.cache-hit != 'true' }}
      run: npm i

    # Next.jsアプリをビルドする
    # プロジェクトルート直下に.nextディレクトリができる
    - name: build
      env:
        SERVICE_DOMAIN: ${{ secrets.SERVICE_DOMAIN}}
        API_KEY: ${{ secrets.API_KEY }}
      run: npm run build

    # 静的なHTMLとしてNext.jsアプリを生成する
    # プロジェクトルート直下にoutディレクトリができる
    # そのなかに、HTMLファイル群と、それらが読み込むJSファイル群を収めた_nextディレクトリがある
    - name: export
      env:
        SERVICE_DOMAIN: ${{ secrets.SERVICE_DOMAIN}}
        API_KEY: ${{ secrets.API_KEY }}
      run: npm run export

    # しかしGitHub Pagesの仕様として_から始まるディレクトリが見えず404となる
    # つまりHTMLからJSを読み込めない
    # これを回避するために.nojekyllファイルをoutディレクトリに作る
    - name: add nojekyll
      run: touch ./out/.nojekyll

    # gh-pagesブランチにoutディレクトリの中身をプッシュする
    # gh-pagesブランチは自動的に作成される
    - name: deploy
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./out